constexpr int P = 1e9+7;
using i64 = long long;
// assume -P <= x < 2P
int norm(int x) {
    if (x < 0) {
        x += P;
    }
    if (x >= P) {
        x -= P;
    }
    return x;
}
template<class T>
T power(T a, int b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
struct Z {
    int x;
    Z(int x = 0) : x(norm(x % P)) {}
    int val() const {
        return x;
    }
    Z operator-() const {
        return Z(norm(P - x));
    }
    Z inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    Z &operator*=(const Z &rhs) {
        x = i64(x) * rhs.x % P;
        return *this;
    }
    Z &operator+=(const Z &rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    Z &operator-=(const Z &rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    Z &operator/=(const Z &rhs) {
        return *this *= rhs.inv();
    }
    friend Z operator*(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res *= rhs;
        return res;
    }
    friend Z operator+(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res += rhs;
        return res;
    }
    friend Z operator-(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res -= rhs;
        return res;
    }
    friend Z operator/(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res /= rhs;
        return res;
    }
    friend istream& operator>> (istream& is, Z& z) {
        is >> z.x;
        z.x = (z.x % P + P) % P;
        return is;
    }
    friend ostream& operator<< (ostream& out, const Z& z) {
        out << z.x;
        return out;
    }
};
 
template<class Info, 
    class Merge = plus<Info>>
struct SegmentTree { 
    const int n;
    const Merge merge;
    vector<Info> info;
    SegmentTree(int n) : n(n), merge(Merge()), info(4 * n) {}
    SegmentTree(vector<Info> init) : SegmentTree(init.size()) {
        function<void(int, int, int)> build = [&](int u, int l, int r) {
            if (l == r) {
                info[u] = init[r];
                return;
            }
            int mid = l + r >> 1;
            build(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);
            pushup(u);
        };
        build(1, 1, n);
    }
    void pushup(int u) {
        info[u] = merge(info[u << 1], info[u << 1 | 1]);
    }
    void modify(int u, int l, int r, int x, const Info &v) {
        if (l == r) {
            info[u] = v;
            return;
        }
        int mid = l + r >> 1;
        if (x <= mid) modify(u << 1, l, mid, x, v);
        else modify(u << 1 | 1, mid + 1, r, x, v);
        pushup(u);
    }
    void modify(int x, const Info &v) {
        modify(1, 1, n, x, v);
    }
    Info rangeQuery(int u, int l, int r, int x, int y) {
        if (r < x || l > y) return Info();
        if (l >= x && r <= y) return info[u];
        int mid = l + r >> 1;
        return merge(rangeQuery(u << 1, l, mid, x, y), rangeQuery(u << 1 | 1, mid + 1, r, x, y));
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 1, n, l, r);
    }
};
 
struct Flow {
    static constexpr int INF = 1e9;
    int n;
    struct Edge {
        int to, cap;
        Edge(int to, int cap) : to(to), cap(cap) {}
    };
    vector<Edge> e;
    vector<vector<int>> g;
    vector<int> cur, d;
    Flow(int n) : n(n), g(n) {}
    bool bfs(int s, int t) {
        cur.assign(n, 0);
        d.assign(n, -1);
        queue<int> q;
        cur[s] = 0;
        d[s] = 0;
        q.push(s);
        while (q.size()) {
            int u = q.front();
            q.pop();
            for (int i : g[u]) {
                int ver = e[i].to;
                if (d[ver] == -1 && e[i].cap) {
                    cur[ver] = 0;
                    d[ver] = d[u] + 1;
                    if (ver == t) return true;
                    q.push(ver);
                }
            }
        }
        return false;
    }
    int find(int u, int t, int limit) {
        if (u == t) return limit;
        int flow = 0;
        for (int i = cur[u]; i < g[u].size() && flow < limit; i ++ ) {
            cur[u] = i;
            int j = g[u][i];
            int ver = e[j].to;
            int c = e[j].cap;
            if (d[ver] == d[u] + 1 && e[j].cap) {
                int a = find(ver, t, min(e[j].cap, limit - flow));
                if (!a) d[ver] = -1;
                e[j].cap -= a, e[j ^ 1].cap += a, flow += a;
            }
        }
        return flow;
    }
    void addEdge(int u, int v, int c) {
        g[u].push_back(e.size());
        e.emplace_back(v, c);
        g[v].push_back(e.size());
        e.emplace_back(u, 0);
    }
    int dinic(int s, int t) {
        int r = 0, flow;
        while (bfs(s, t)) while (flow = find(s, t, INF)) r += flow;
        return r;
    }
    int maxFlow(int s, int t) {
        return dinic(s, t);
    }
};
 
struct DSU {
    vector<int> p, siz;
    DSU(int n) : p(n), siz(n, 1) { iota(p.begin(), p.end(), 0); }
    int find(int x) {
        if (p[x] != x) p[x] = find(p[x]);
        return p[x];
    }
    bool same(int x, int y) { return find(x) == find(y); }
    bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) return false;
        siz[x] += siz[y];
        p[y] = x;
        return true;
    }
    int size(int x) { return siz[find(x)]; }
};
 
void trans(string a, vector<int> &A) {
    for (int i = a.size() - 1; i >= 0; i -- ) A.push_back(a[i] - '0');
}
 
bool cmp(string a, string b) {
    if (a.size() != b.size()) return a.size() > b.size();
    for (int i = 0; i < a.size(); i ++ )
        if (a[i] != b[i])
            return a[i] > b[i];
    return true;
}
 
string sub(string a, string b);
 
string add(string a, string b) { // 高精度加法 
    if (a[0] == '-' && b[0] == '-') return '-' + add(a.substr(1), b.substr(1));
    else if (a[0] == '-') return sub(b, a.substr(1));
    else if (b[0] == '-') return sub(a, b.substr(1));
 
    if (a.size() < b.size()) return add(b, a);
 
    vector<int> A, B;
    trans(a, A), trans(b, B);
 
    vector<int> C;
    int t = 0;
    for (int i = 0; i < A.size(); i ++ )
    {
        t += A[i];
        if (i < B.size()) t += B[i];
        C.push_back(t % 10);
        t /= 10;
    }
    if (t) C.push_back(t);
 
    string c = "";
    for (int i = C.size() - 1; i >= 0; i -- ) c += (char)C[i] + '0';
    return c;
}
 
string sub(string a, string b) { // 高精度减法 
    if (a[0] == '-' && b[0] == '-') return sub(b.substr(1), a.substr(1));
    else if (a[0] == '-') return '-' + add(a.substr(1), b);
    else if (b[0] == '-') return add(a, b.substr(1));
 
    if (!cmp(a, b)) return '-' + sub(b, a);
 
    vector<int> A, B;
    trans(a, A), trans(b, B);
 
    vector<int> C;
    for (int i = 0, t = 0; i < A.size(); i ++ )
    {
        t = A[i] - t;
        if (i < B.size()) t -= B[i];
        C.push_back((t + 10) % 10);
        if (t < 0) t = 1;
        else t = 0;
    }
    while (C.size() > 1 && C.back() == 0) C.pop_back();
 
    string s = "";
    for (int i = C.size() - 1; i >= 0; i -- ) s += (char)C[i] + '0';
    return s;
}
 
string mul(string a, string b) { // 高精乘高精 
    if (a[0] == '-' && b[0] == '-') return mul(a.substr(1), b.substr(1));
    else if (a[0] == '-') return '-' + mul(a.substr(1), b);
    else if (b[0] == '-') return '-' + mul(a, b.substr(1));
 
    vector<int> A, B;
    trans(a, A), trans(b, B);
 
    int num = a.size() + b.size() - 1;
    vector<int> C(num + 1);
    for (int i = 0; i < num; i ++ )
    {
        for (int j = 0; j <= i; j ++ ) C[i] += (j < a.size() ? A[j] : 0) * ((i - j) < b.size() ? B[i - j] : 0);
        if (C[i] >= 0)
        {
            C[i + 1] += C[i] / 10;
            C[i] %= 10;
        }
    }
    while (C.size() > 1 && C.back() == 0) C.pop_back();
    
    string s = "";
    for (int i = C.size() - 1; i >= 0; i -- ) s += (char)C[i] + '0';
    return s;
}
 
string mul(string a, int b) { // 高精度乘法 
    if (a[0] == '-' && b < 0) return mul(a.substr(1), -b);
    else if (a[0] == '-') return '-' + mul(a.substr(1), b);
    else if (b < 0) return '-' + mul(a, -b);
 
    vector<int> A;
    trans(a, A);
 
    vector<int> C;
    int t = 0;
    for(int i = 0; i < A.size() || t; i ++ )
    {
        if(i < A.size()) t += A[i] * b;
        C.push_back(t % 10);
        t /= 10;
    }
    while(C.size() > 1 && C.back() == 0) C.pop_back();
 
    string s = "";
    for (int i = C.size() - 1; i >= 0; i -- ) 
    {
        s += C[i] % 10 + '0';
        C[i] /= 10;
        while (C[i])
        {
            s += (char)(C[i] % 10) + '0';
            C[i] /= 10;
        }
    }
    return s;
}
 
string div(string a, int b, int &r) { // 高精度除法带余数 
    vector<int> A, C;
    trans(a, A);
    r = 0;
    for(int i = A.size() - 1; i >= 0; i -- )
    {
        r = r * 10 + A[i];
        C.push_back(r / b);
        r %= b;
    }
    reverse(C.begin(), C.end());
    while(C.size() > 1 && C.back() == 0) C.pop_back();
 
    string s = "";
    for (int i = C.size() - 1; i >= 0; i -- ) s += (char)C[i] + '0';
    return s;
}
 